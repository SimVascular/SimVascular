# GitHub build workflow configuration file.
#
# This files defines the GitHub build actions which perform the following steps:
# 
#   - Building SimVascular on all supported platforms
#   - Creating installers for all supported platforms
#   - Uploading the generated installers as artifacts
#   - Uploading the generated installers as release assets (only for releases)

name: Build
on: [push, pull_request]
jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build
        shell: bash
        run: |
          export TERM=xterm-256color
          export CPATH='/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include:/opt/local/include'
          export LIBRARY_PATH='/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib:/opt/local/lib'
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          export LDFLAGS=-L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib
          mkdir Build
          cd Build
          cmake .. -DSV_ENABLE_DISTRIBUTION=ON
          make -j3
      - name: Create installer
        shell: bash
        run: |
          cd Build/SimVascular-build
          cpack
          cp SimVascular*.dmg ../../SimVascular-macOS.dmg
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: macOS Installer
          path: SimVascular-macOS.dmg
          if-no-files-found: error
      - name: Upload release asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: SimVascular-macOS.dmg
          asset_name: SimVascular-${{github.ref_name}}-macOS.dmg
          tag: ${{ github.ref }}
          
  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        shell: bash
        run: sudo apt-get install libglu1-mesa-dev libxt-dev libxi-dev libglew-dev libxmu-dev zip qtbase5-dev qt5-qmake cmake
      - name: Manually install gcc-8
        shell: bash
        run: |
          sudo apt update
          wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/gcc-8_8.4.0-3ubuntu2_amd64.deb
          wget http://mirrors.edge.kernel.org/ubuntu/pool/universe/g/gcc-8/gcc-8-base_8.4.0-3ubuntu2_amd64.deb
          wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/libgcc-8-dev_8.4.0-3ubuntu2_amd64.deb
          wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/cpp-8_8.4.0-3ubuntu2_amd64.deb
          wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/libmpx2_8.4.0-3ubuntu2_amd64.deb
          wget http://mirrors.kernel.org/ubuntu/pool/main/i/isl/libisl22_0.22.1-1_amd64.deb
          sudo apt install ./libisl22_0.22.1-1_amd64.deb ./libmpx2_8.4.0-3ubuntu2_amd64.deb ./cpp-8_8.4.0-3ubuntu2_amd64.deb ./libgcc-8-dev_8.4.0-3ubuntu2_amd64.deb ./gcc-8-base_8.4.0-3ubuntu2_amd64.deb ./gcc-8_8.4.0-3ubuntu2_amd64.deb
          wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/libstdc++-8-dev_8.4.0-3ubuntu2_amd64.deb
          wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/g++-8_8.4.0-3ubuntu2_amd64.deb
          sudo apt install ./libstdc++-8-dev_8.4.0-3ubuntu2_amd64.deb ./g++-8_8.4.0-3ubuntu2_amd64.deb
      - name: Build
        shell: bash
        run: |
          mkdir Build
          cd Build
          export CC=/usr/bin/gcc-8
          export CXX=/usr/bin/g++-8
          cmake .. -DSV_ENABLE_DISTRIBUTION=ON
          make -j2
      - name: Create installer
        shell: bash
        run: |
          cd Build/SimVascular-build
          cpack
          cp SimVascular*.deb ../../SimVascular-Ubuntu.deb
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Ubuntu Installer
          path: SimVascular-Ubuntu.deb
          if-no-files-found: error
      - name: Upload release asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: SimVascular-Ubuntu.deb
          asset_name: SimVascular-${{github.ref_name}}-Ubuntu.deb
          tag: ${{ github.ref }}
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Cygwin
        uses: cygwin/cygwin-install-action@master
        with:
          install-dir: C:\cygwin64
          packages: make tcl zip gzip tar patch wget
      - name: Install Visual Studio BuildTools
        run: |
          choco install visualstudio2017buildtools visualstudio2017-workload-vctools
      - name: Build
        run: |
          cd BuildWithMake
          dos2unix ./quick-build-windows.sh
          C:\cygwin64\bin\bash.exe -c "./build_windows_github.bat"
          cp Release/SimVascular-*-Windows-64bit-bundle.exe ../SimVascular-Windows.exe
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Windows Installer
          path: SimVascular-Windows.exe
          if-no-files-found: error
      - name: Upload release asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: SimVascular-Windows.exe
          asset_name: SimVascular-${{github.ref_name}}-Windows.exe
          tag: ${{ github.ref }}
