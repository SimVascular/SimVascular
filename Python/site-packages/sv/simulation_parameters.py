
class FluidParameters(object):
    '''The FluidParameters class is used to set fluid simulation parameters. 
    '''
    def __init__(self):
        self.boundary_conditions = self.BoundaryConditions()
        self.fluid_properties = self.FluidProperties()
        self.initial_conditions = self.InitialConditions()
        self.solution = self.Solution()
        self.wall_properties = self.WallProperties()
        self.use_mpi = False 
        self.num_processes = 0 

    def __str__(self):
        return 'sv.simulation.FluidParameters'

    class BoundaryConditions(object):
        '''The BoundaryConditions class is used to set fluid simulation boundary conditions.
        '''
        RESISTANCE = "Resistnce"
        PRESCRIBED_VELOCITIES = "Prescribed Velocities"

        def __init__(self):
            self.bc_list = []

        def add_resistance(self, face_name, resistance):
            self.bc_list.append( { 'type': self.RESISTANCE, 'faceID': face_name, 'value':resistance})

        def add_velocities(self, face_name, file_name):
            self.bc_list.append( { 'type': self.PRESCRIBED_VELOCITIES, 'faceID': face_name, 'file_name': file_name} )

    class InitialConditions(object):
        '''The InitialConditions class is used to set fluid simulation initial conditions.
        '''
        def __init__(self):
            self.pressure = 0.0
            self.velocity = [0.0001, 0.0001, 0.0001]

        def __str__(self):
            return ', '.join("%s: %s" % item for item in vars(self).items())

    class FluidProperties(object):
        '''The FluidProperties class is used to define the fluid simulation fluid properties.
        '''
        def __init__(self):
            self.density = 1.06
            self.viscosity = 0.04

    class Solution(object):
        '''The Solution class is used to define the fluid simulation solution parameters.
        '''
        def __init__(self):
            self.time_step = 0.0
            self.num_time_steps = 0.0
            self.restart_write_frequency = 10
            self.output_surface_stress = True
            self.force_calculation_method = 'Velocity Based' 
            self.print_average_solution = True
            self.print_error_indicators = False
            self.step_construction = 2
            self.pressure_coupling = True
            self.backflow_stabilization_coefficient = 0.2 

        def __str__(self):
            return ', '.join("%s: %s" % item for item in vars(self).items())

    class WallProperties(object):
        '''The WallProperties class is used to define the material properties of the solid wall.
        '''
        def __init__(self):
            self.rigid = True
            self.density = 0.0
            self.viscosity = 0.0

        def __str__(self):
            return ', '.join("%s: %s" % item for item in vars(self).items())

        def add_property(self, faceID, e, vis):
            self.density = e

class OneDimensionalParameters(object):
    '''The OneDimensionalParameters class is used to set 1D simulation parameters. 
    '''
    def __init__(self):
        pass 

    def __str__(self):
        return 'sv.simulation.OneDimensionalParameters'

    class BoundaryConditions(object):
        '''The BoundaryConditions class is used to set 1D simulation boundary conditions.
        '''
        BC_TYPE_RCR = "RCR"
        BC_TYPE_RESISTANCE = "Resistnce"
        BC_TYPE_PRESCRIBED_VELOCITIES = "Prescribed Velocities"

        def __init__(self):
            self.bc_list = []

        def add_resistance(self, face_name, resistance):
            self.bc_list.append( { 'type': self.BC_TYPE_RESISTANCE, 'faceID': face_name, 'resistance':resistance})

        def add_rcr(self, face_name, Rp, C, Rd):
            self.bc_list.append( { 'type': self.BC_TYPE_RCR, 'faceID': face_name, 'Rp':Rp, 'C':C, 'Rd':Rd})

        def add_velocities(self, face_name, file_name):
            self.bc_list.append( { 'type': self.BC_TYPE_PRESCRIBED_VELOCITIES, 'faceID': face_name, 'file_name': file_name} )

    class FluidProperties(object):
        '''The FluidProperties class is used to define the 1D simulation fluid properties.
        '''
        def __init__(self):
            self.density = 1.06
            self.viscosity = 0.04

    class ModelParameters(object):
        def __init__(self):
            self.name = None
            self.surface = None
            self.outlet_face_names = None 
            self.inlet_face_names = None 
            self.centerlines_file_name = None 

    class MeshParameters(object):
        def __init__(self):
            self.element_size = 0.1

    class Solution(object):
        '''The Solution class is used to define the 1D simulation solution parameters.
        '''
        def __init__(self):
            self.time_step = 0.0
            self.num_time_steps = 0.0
            self.save_frequency = 20

        def __str__(self):
            return ', '.join("%s: %s" % item for item in vars(self).items())

    class WallProperties(object):
        '''The WallProperties class is used to define the material properties of the solid wall.
        '''
        OLUFSEN_MATERIAL_MODEL = 'OLUFSEN'
        LINEAR_MATERIAL_MODEL = 'LINEAR'
        def __init__(self):
            self.material_model = None

        class LinearMaterial(object):
            def __init__(self):
                self.name = OneDimensionalParameters.WallProperties.LINEAR_MATERIAL_MODEL
                self.eh_r = 1.0e7
                self.pressure = 0.0

            def __str__(self):
                return 'name: {0:s},  Eh/r: {1:g},  pressure: {2:g}'.format(self.name, self._eh_r, self._pressure) 

        class OlufsenMaterial(object):
            def __init__(self):
                self.name = OneDimensionalParameters.WallProperties.OLUFSEN_MATERIAL_MODEL
                self.k1 = 2e7
                self.k2 = -22.5267 
                self.k3 = 8.65e5
                self.exponent = 1.1 
                self.pressure = 1133240 

            def __str__(self):
                params = 'name:{0:s}, k1:{1:g}, k2:{2:g}, k3:{3:g}, exponent:{4:g}, pressure:{5:g}'
                return params.format(self.name, self.k1, self.k2, self.k3, self.exponent, self.pressure) 


